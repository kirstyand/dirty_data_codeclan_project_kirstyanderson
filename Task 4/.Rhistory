print(phrase)
}
year_option <- c(2015, 2016, 2017)
for(year_cat in year_option){
max_year <- candy_full %>%
filter(year == year_cat) %>%
filter(candy != "any_full_sized_candy_bar") %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total)) %>%
head(1)
phrase <- paste("In",year_cat,"the most popular candy bar was '",max_year[1,1],"', which scored",max_year[1,2],"points.")
print(phrase)
}
year_option <- c(2015, 2016, 2017)
for(year_cat in year_option){
max_year <- candy_full %>%
filter(year == year_cat) %>%
filter(candy != "any_full_sized_candy_bar") %>%
filter(candy != "cash_or_other_forms_of_legal_tender") %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total)) %>%
head(1)
phrase <- paste("In",year_cat,"the most popular candy bar was '",max_year[1,1],"', which scored",max_year[1,2],"points.")
print(phrase)
}
# 1: Get list of countries to see names
candy_full %>%
distinct(country)
#USA:
candy_full %>%
filter(country == "[usa]") %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total)) %>%
head(1)
candy_full %>%
filter(country == "[usa]") %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total)) %>%
head(1)
candy_full %>%
filter(country == "[usa]")
# USA
candy_full %>%
filter(str_detect(country, "usa")) %>%
filter(!str_detect(country, "not")) %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total))
# Filter where country contains the string "usa", group by candy, count ratings for each candy and find the top
candy_full %>%
filter(str_detect(country, "usa")) %>%
filter(!str_detect(country, "not")) %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total))
# Canada: check filter:
# candy_full %>%
#   filter(str_detect(country, "canada" )) %>%
#   filter(!str_detect(country, "not")) %>%
#   distinct(country)
candy_full %>%
filter(str_detect(country, "canada" )) %>%
filter(!str_detect(country, "not")) %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total))
# UK: check filter:
#  candy_full %>%
#  filter(str_detect(country, "uk|u.k.|united|kingdom|scotland|ireland|england|wales" )) %>%
#  filter(!str_detect(country, "not|states|soviet")) %>%
#  distinct(country)
candy_full %>%
filter(str_detect(country, "uk|u.k.|united|kingdom|scotland|ireland|england|wales" )) %>%
filter(!str_detect(country, "not|states|soviet")) %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total))
# Check Filter:
# candy_full %>%
#     filter(!str_detect(country, "canada|uk|u.k.|united|kingdom|scotland|ireland|england|wales|usa" )) %>%
#     distinct(country)
candy_full %>%
filter(!str_detect(country, "canada|uk|u.k.|united|kingdom|scotland|ireland|england|wales|usa" )) %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total))
gender_option <- c("Female", "Male", "Other", NA)
for (gender_cat in gender_option){
if (!is.na(gender_cat)){
max_candy <- candy_full %>%
filter(gender == gender_cat) %>%
filter(candy != "any_full_sized_candy_bar") %>%
group_by(candy) %>%
summarise(points = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(points)) %>%
head(1)
phrase <- paste("When gender was",gender_cat, "the top rated candy bar was",max_candy[1,1],"which scored",max_candy[1,2],"points")
print(phrase)
}
else {
max_candy <- candy_full %>%
filter(is.na(gender)) %>%
filter(candy != "any_full_sized_candy_bar") %>%
group_by(candy) %>%
summarise(points = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(points)) %>%
head(1)
phrase <- paste("When gender was NA the top rated candy bar was",max_candy[1,1],"which scored",max_candy[1,2],"points")
print(phrase)
}}
candy_full$age %>% distinct()
candy_full$age %>% distinct(age)
distinct(candy_full$age)
unique(candy_full$age)
library(tidyverse)
library(here)
library(stringr)
library(tidyverse)
library(here)
library(stringr)
# candy_2015_clean <- candy_2015_clean %>%
#  rename("going_out" = "are_you_going_actually_going_trick_or_treating_yourself",
#         "age"       = "how_old_are_you")
# candy_2015_clean <- candy_2015_clean %>%
#   rename("boxo_raisins"                  = "box_o_raisins",
#          "bonkers_the_candy"             = "bonkers",
#          "sweetums_a_friend_to_diabetes" = "sweetums",
#          "viral_dress" = "that_dress_that_went_viral_early_this_year_when_i_first_saw_it_it_was")
# candy_2015_clean <- candy_2015_clean %>%
#   add_column(year = 2015,.after = "going_out")
# candy_clean_bound <- plyr::rbind.fill(candy_2015_clean,
#                                 candy_2016_clean,
#                                 candy_2017_clean)
# candy_clean_long <- pivot_longer(candy_clean_bound,
#                                  cols = c("butterfinger": "york_peppermint_patties",
#                                           "necco_wafers",
#                                           "sea_salt_flavored_stuff_probably_chocolate_since_this_is_the_it_flavor_of_the_year",
#                                           "bonkers_the_board_game":"whatchamacallit_bars",
#                                           "green_party_m_ms":"take_5"),
#                                            names_to = "candy",
#                                            values_to = "rating")  %>%
#                     relocate(candy, .after = going_out) %>%
#                     relocate(rating, .after = candy)
# candy_clean_long <- candy_clean_long %>%
#   mutate(country = recode(country,
#                           "'merica" = "usa",
#                           "america" = "usa",
#                           ))
# candy_clean_long$age[!grepl("^-?[0-9]+(\\.[0-9]+)?$", candy_clean_long$age)] <- NA
# candy_clean_long$age <- as.numeric(candy_clean_long$age) # (2) convert the column to numeric
# candy_clean_long$age <- round(candy_clean_long$age, digits = 0) # (3) round age to nearest integer
# candy_clean_long$age[sapply(candy_clean_long$age, is.infinite)] <- NA # replace infinite with NA
candy_full <- read_csv(here::here("clean_data/candy_cleaned.csv"))
# count number of rows that have valid candy ratings
candy_full %>%
select(candy, rating) %>%
filter(!is.na(rating)) %>%
nrow()
# 1: check what answers are in column "going_out" & check age col is numerical
candy_full %>%
distinct(going_out)
class(candy_full$age)
# 2: Filter for "yes" to going out and find mean age, discount NA values
candy_full %>%
filter(going_out == "Yes") %>%
summarise(avg_age = round(mean(age, na.rm = TRUE), digits = 0))
# As above, filter for "no" to going out and find mean age, discount NA values
candy_full %>%
filter(going_out == "No") %>%
summarise(avg_age = round(mean(age, na.rm = TRUE), digits = 0))
# Create a vector containing each rating type
rating_options <- c("JOY", "DESPAIR", "MEH")
# Create a loop that filters the DF for each rating, then counts number of candies
for (vote in rating_options){
max_candy <-  candy_full %>%
filter(rating == vote) %>%
count(candy) %>%
arrange(desc(n)) %>%
head(1)
phrase <- paste("The candy '",max_candy[1,1],"' received the most",vote,"ratings, with",max_candy[1,2],"ratings.")
print(phrase)
}
rating_options <- c("JOY", "DESPAIR", "MEH")
for (vote in rating_options){
max_candy <-  candy_full %>%
filter(rating == vote) %>%
filter(candy != "any_full_sized_candy_bar") %>%
count(candy) %>%
arrange(desc(n)) %>%
head(1)
phrase <- paste("The candy '",max_candy[1,1],"' received the most",vote,"ratings, with",max_candy[1,2],"ratings.")
print(phrase)
}
# Filter candy column for starburst and rating column for despair, then count rows.
candy_full %>%
filter(candy == "starburst") %>%
filter(rating == "DESPAIR") %>%
summarise(count = n())
#recode each rating to its new number, save this to a new column called "num_rating"
candy_full <- candy_full %>%
mutate(num_rating = recode(rating,
"JOY" = 1,
"DESPAIR" = -1,
"MEH" = 0)) %>%
relocate(num_rating, .after = rating)
# create a vector containing all possible gender categories, called "gender_option"
gender_option <- c("Female", "Male", "Other", NA)
# For each gender option, if it is not NA, then filter the DF for the selected gender, summarise the total points for each candy and print the highest one
for (gender_cat in gender_option){
if (!is.na(gender_cat)){
max_candy <- candy_full %>%
filter(gender == gender_cat) %>%
group_by(candy) %>%
summarise(points = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(points)) %>%
head(1)
phrase <- paste("When gender was",gender_cat, "the top rated candy bar was",max_candy[1,1],"which scored",max_candy[1,2],"points")
print(phrase)
}
# if the gender is NA, do the same thing but filter for gender is NA
else {
max_candy <- candy_full %>%
filter(is.na(gender)) %>%
group_by(candy) %>%
summarise(points = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(points)) %>%
head(1)
phrase <- paste("When gender was NA the top rated candy bar was",max_candy[1,1],"which scored",max_candy[1,2],"points")
print(phrase)
}}
gender_option <- c("Female", "Male", "Other", NA)
for (gender_cat in gender_option){
if (!is.na(gender_cat)){
max_candy <- candy_full %>%
filter(gender == gender_cat) %>%
filter(candy != "any_full_sized_candy_bar") %>%
group_by(candy) %>%
summarise(points = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(points)) %>%
head(1)
phrase <- paste("When gender was",gender_cat, "the top rated candy bar was",max_candy[1,1],"which scored",max_candy[1,2],"points")
print(phrase)
}
else {
max_candy <- candy_full %>%
filter(is.na(gender)) %>%
filter(candy != "any_full_sized_candy_bar") %>%
group_by(candy) %>%
summarise(points = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(points)) %>%
head(1)
phrase <- paste("When gender was NA the top rated candy bar was",max_candy[1,1],"which scored",max_candy[1,2],"points")
print(phrase)
}}
gender_option <- c("Female", "Male", "Other", NA)
for (gender_cat in gender_option){
if (!is.na(gender_cat)){
max_candy <- candy_full %>%
filter(gender == gender_cat) %>%
filter(candy != "any_full_sized_candy_bar") %>%
filter(candy != "cash_or_other_forms_of_legal_tender") %>%
group_by(candy) %>%
summarise(points = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(points)) %>%
head(1)
phrase <- paste("When gender was",gender_cat, "the top rated candy bar was",max_candy[1,1],"which scored",max_candy[1,2],"points")
print(phrase)
}
else {
max_candy <- candy_full %>%
filter(is.na(gender)) %>%
filter(candy != "any_full_sized_candy_bar") %>%
filter(candy != "cash_or_other_forms_of_legal_tender") %>%
group_by(candy) %>%
summarise(points = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(points)) %>%
head(1)
phrase <- paste("When gender was NA the top rated candy bar was",max_candy[1,1],"which scored",max_candy[1,2],"points")
print(phrase)
}}
# create a vector containing all possible years, called "year_option"
year_option <- c(2015, 2016, 2017)
# For each year option, filter the DF for the selected year, summarise the total points for each candy and print the highest one
for(year_cat in year_option){
max_year <- candy_full %>%
filter(year == year_cat) %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total)) %>%
head(1)
phrase <- paste("In",year_cat,"the most popular candy bar was '",max_year[1,1],"', which scored",max_year[1,2],"points.")
print(phrase)
}
year_option <- c(2015, 2016, 2017)
for(year_cat in year_option){
max_year <- candy_full %>%
filter(year == year_cat) %>%
filter(candy != "any_full_sized_candy_bar") %>%
filter(candy != "cash_or_other_forms_of_legal_tender") %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total)) %>%
head(1)
phrase <- paste("In",year_cat,"the most popular candy bar was '",max_year[1,1],"', which scored",max_year[1,2],"points.")
print(phrase)
}
# 1: Get list of countries to see names
candy_full %>%
distinct(country)
# Filter where country contains the string "usa", group by candy, count ratings for each candy and find the top
# Check filter first:
#  candy_full %>%
#  filter(str_detect(country, "usa")) %>%
#  filter(!str_detect(country, "not")) %>%
#  distinct(country)
candy_full %>%
filter(str_detect(country, "usa")) %>%
filter(!str_detect(country, "not")) %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total))
# Check filter:
# candy_full %>%
#   filter(str_detect(country, "canada" )) %>%
#   filter(!str_detect(country, "not")) %>%
#   distinct(country)
candy_full %>%
filter(str_detect(country, "canada" )) %>%
filter(!str_detect(country, "not")) %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total))
# Check filter:
#  candy_full %>%
#     filter(str_detect(country, "uk|u.k.|united|kingdom|scotland|ireland|england|wales" )) %>%
#     filter(!str_detect(country, "not|states|soviet")) %>%
#     distinct(country)
candy_full %>%
filter(str_detect(country, "uk|u.k.|united|kingdom|scotland|ireland|england|wales" )) %>%
filter(!str_detect(country, "not|states|soviet")) %>%
group_by(candy) %>%
summarise(total = sum(num_rating, na.rm = TRUE)) %>%
arrange(desc(total))
#recode each rating to its new number, save this to a new column called "num_rating"
candy_full <- candy_full %>%
mutate(num_rating = recode(rating,
"JOY" = 1,
"DESPAIR" = -1,
"MEH" = 0)) %>%
relocate(num_rating, .after = rating)
# Load libraries
library(tidyverse)
library(janitor)
library(here)
library(readxl)
--------------------------------------------------------------------------------
# Load data
candy_2015 <- read_xlsx(here("raw_data/candy_ranking_data/boing-boing-candy-2015.xlsx"))
library(here)
here()
library(readxl)
library(readxl)
library(readxl)
candy_2015 <- read_xlsx(here("raw_data/candy_ranking_data/boing-boing-candy-2015.xlsx"))
candy_2016 <- read_xlsx(here("raw_data/candy_ranking_data/boing-boing-candy-2016.xlsx"))
candy_2017 <- read_xlsx(here("raw_data/candy_ranking_data/boing-boing-candy-2017.xlsx"))
# Load libraries
library(tidyverse)
library(janitor)
library(here)
library(readxl)
--------------------------------------------------------------------------------
# Load data
candy_2015 <- read_xlsx(here("raw_data/candy_ranking_data/boing-boing-candy-2015.xlsx"))
# use janitor to transform to snake_case, create new df for each to avoid writing over original data
candy_2015_clean <- clean_names(candy_2015)
candy_2016_clean <- clean_names(candy_2016)
candy_2017_clean <- clean_names(candy_2017)
--------------------------------------------------------------------------------
# Admin Columns:
# There are some 'admin' columns at the start of each data set (age, gender, country, state, "going-out");
# recode using rename() so that they are labelled the same in all 3 data sets:
#2015: rename for "going_out" and "age"
candy_2015_clean <- candy_2015_clean %>%
rename("going_out" = "are_you_going_actually_going_trick_or_treating_yourself",
"age"       = "how_old_are_you")
candy_2017_clean <- clean_names(candy_2017)
candy_2016_clean <- candy_2016_clean %>%
rename("going_out" = "are_you_going_actually_going_trick_or_treating_yourself",
"age"       = "how_old_are_you",
"gender"    = "your_gender",
"country"   = "which_country_do_you_live_in",
"state"     = "which_state_province_county_do_you_live_in")
colnames(candy_2017_clean) <- str_remove_all(colnames(candy_2017_clean), "q[0-9]_")
candy_2017_clean <- candy_2017_clean %>%
rename("state" = "state_province_county_etc")
candy_2017_clean <- candy_2017_clean %>%
rename("state" = "state_province_county_etc")
candy_2017_clean <- clean_names(candy_2017)
candy_2015_clean <- candy_2015_clean %>%
rename("going_out" = "are_you_going_actually_going_trick_or_treating_yourself",
"age"       = "how_old_are_you")
candy_2016_clean <- candy_2016_clean %>%
rename("going_out" = "are_you_going_actually_going_trick_or_treating_yourself",
"age"       = "how_old_are_you",
"gender"    = "your_gender",
"country"   = "which_country_do_you_live_in",
"state"     = "which_state_province_county_do_you_live_in")
candy_2016_clean <- clean_names(candy_2016)
candy_2016_clean <- candy_2016_clean %>%
rename("going_out" = "are_you_going_actually_going_trick_or_treating_yourself",
"age"       = "how_old_are_you",
"gender"    = "your_gender",
"country"   = "which_country_do_you_live_in",
"state"     = "which_state_province_county_do_you_live_in")
candy_2017_clean <- clean_names(candy_2017)
colnames(candy_2017_clean) <- str_remove_all(colnames(candy_2017_clean), "q[0-9]_")
candy_2017_clean <- candy_2017_clean %>%
rename("state" = "state_province_county_etc")
cols_2015 <- str_sort(colnames(candy_2015_clean))
cols_2016 <- str_sort(colnames(candy_2016_clean))
cols_2017 <- str_sort(colnames(candy_2017_clean))
all_cols  <- c(cols_2015, cols_2016, cols_2017) %>%
unique() %>%
sort()
candy_2015_clean <- candy_2015_clean %>%
rename("boxo_raisins"                  = "box_o_raisins",
"bonkers_the_candy"             = "bonkers",
"sweetums_a_friend_to_diabetes" = "sweetums",
"viral_dress" = "that_dress_that_went_viral_early_this_year_when_i_first_saw_it_it_was")
candy_2016_clean <- candy_2016_clean %>%
rename("viral_dress" = "that_dress_that_went_viral_a_few_years_back_when_i_first_saw_it_it_was")
candy_2017_clean <- candy_2017_clean %>%
rename("anonymous_brown_globs_that_come_in_black_and_orange_wrappers" =
"anonymous_brown_globs_that_come_in_black_and_orange_wrappers_a_k_a_mary_janes",
"viral_dress" = "q10_dress",
"which_day_do_you_prefer_friday_or_sunday" = "q11_day",
"x100_grand_bar" = "100_grand_bar")
candy_2015_clean <- candy_2015_clean %>%
add_column(year = 2015,.after = "going_out")
candy_2016_clean <- candy_2016_clean %>%
add_column(year = 2016,.after = "going_out")
candy_2017_clean <- candy_2017_clean %>%
add_column(year = 2017,.after = "going_out")
candy_clean_bound <- plyr::rbind.fill(candy_2015_clean,
candy_2016_clean,
candy_2017_clean)
candy_clean_bound <- candy_clean_bound %>%
relocate(year, .after = timestamp) %>%
relocate(gender,  .after = age)    %>%
relocate(country, .after = gender) %>%
relocate(state, .after = country)
candy_clean_long <- pivot_longer(candy_clean_bound,
cols = c("butterfinger": "york_peppermint_patties",
"necco_wafers",
"sea_salt_flavored_stuff_probably_chocolate_since_this_is_the_it_flavor_of_the_year",
"bonkers_the_board_game":"whatchamacallit_bars",
"green_party_m_ms":"take_5"),
names_to = "candy",
values_to = "rating")  %>%
relocate(candy, .after = going_out) %>%
relocate(rating, .after = candy)
country_list <- candy_clean_long %>%
select(country) %>%
filter(!is.na(country)) %>%
distinct()
candy_clean_long <- candy_clean_long                        %>%
mutate(country = str_to_lower(country)) %>%
arrange(country)
candy_clean_long <- candy_clean_long %>%
mutate(country = recode(country,
"'merica" = "usa",
"america" = "usa",
"i pretend to be from canada, but i am really from the united states." = "usa",
"n. america" = "usa",
"the best one - usa" = "usa",
"the united states" = "usa",
"the united states of america" = "usa",
"sub-canadian north america... 'merica" = "usa",
"the yoo ess of aaayyyyyy" = "usa",
"u s" = "usa",
"u s a" = "usa",
"u.s." = "usa",
"u.s.a" = "usa",
"u.s.a." = "usa",
"unhinged states" = "usa",
"unied states" = "usa",
"unite states" = "usa",
"united  states of america" = "usa",
"united sates" = "usa",
"united staes" = "usa",
"united state" = "usa",
"united statea" = "usa",
"united stated" = "usa",
"united states" = "usa",
"united states of america" = "usa",
"united statss" = "usa",
"united stetes" = "usa",
"united ststes" = "usa",
"unites states" = "usa",
"units states" = "usa",
"us" = "usa",
"us of a" = "usa",
"ussa"  = "usa"))
candy_clean_long$age[!grepl("^-?[0-9]+(\\.[0-9]+)?$", candy_clean_long$age)] <- NA
candy_clean_long$age <- as.numeric(candy_clean_long$age) # (2) convert the column to numeric
candy_clean_long$age <- round(candy_clean_long$age, digits = 0) # (3) round age to nearest integer
candy_clean_long$age[sapply(candy_clean_long$age, is.infinite)] <- NA
